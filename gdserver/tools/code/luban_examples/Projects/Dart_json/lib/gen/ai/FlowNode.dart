
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'dart:ffi';
import 'dart:collection';
import '/gen/Tables.dart';

import '/gen/ai/Decorator.dart';
import '/gen/ai/Service.dart';

import '/gen/ai/Node.dart';

import '/gen/ai/Sequence.dart';

import '/gen/ai/Selector.dart';

import '/gen/ai/SimpleParallel.dart';

import '/gen/ai/UeWait.dart';

import '/gen/ai/UeWaitBlackboardTime.dart';

import '/gen/ai/MoveToTarget.dart';

import '/gen/ai/ChooseSkill.dart';

import '/gen/ai/MoveToRandomLocation.dart';

import '/gen/ai/MoveToLocation.dart';

import '/gen/ai/DebugPrint.dart';

abstract class FlowNode extends Node
{
    FlowNode(
    {
    required super.id, 
    required super.node_name, 
    required this.decorators,
    required this.services,
    }
    );

    factory FlowNode.deserialize(dynamic _buf){
      switch (_buf['\$type'])
      {
        case "Sequence": return Sequence.deserialize(_buf);
        case "Selector": return Selector.deserialize(_buf);
        case "SimpleParallel": return SimpleParallel.deserialize(_buf);
        case "UeWait": return UeWait.deserialize(_buf);
        case "UeWaitBlackboardTime": return UeWaitBlackboardTime.deserialize(_buf);
        case "MoveToTarget": return MoveToTarget.deserialize(_buf);
        case "ChooseSkill": return ChooseSkill.deserialize(_buf);
        case "MoveToRandomLocation": return MoveToRandomLocation.deserialize(_buf);
        case "MoveToLocation": return MoveToLocation.deserialize(_buf);
        case "DebugPrint": return DebugPrint.deserialize(_buf);
        default: throw Exception('unknown type:$_buf[\$type]');
      }
    }

    final List<Decorator> decorators;
    final List<Service> services;
     @override
    void resolveRef(Tables tables)
    {
        super.resolveRef(tables);

        for (var _e in decorators) { _e?.resolveRef(tables); }
        for (var _e in services) { _e?.resolveRef(tables); }
    }

    @override
    String toString() {
        return 'FlowNode(id:$id, node_name:$node_name, decorators:$decorators, services:$services, )';
    }
}

