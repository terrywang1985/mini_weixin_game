
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'dart:ffi';
import 'dart:collection';
import '/gen/Tables.dart';

import '/gen/ai/Decorator.dart';
import '/gen/ai/Service.dart';
import '/gen/ai/EFinishMode.dart';
import '/gen/ai/Task.dart';
import '/gen/ai/FlowNode.dart';

import '/gen/ai/ComposeNode.dart';

 class SimpleParallel extends ComposeNode
{
    SimpleParallel(
    {
    required super.id, 
    required super.node_name, 
    required super.decorators, 
    required super.services, 
    required this.finish_mode,
    required this.main_task,
    required this.background_node,
    }
    );

    factory SimpleParallel.deserialize(dynamic _buf){
        final id;
        id = _buf['id'] as int;
        final node_name;
        node_name = _buf['node_name'] as String;
        final decorators;
        {var _json0 = _buf['decorators'] as List<dynamic>; decorators = List<Decorator>.empty(growable: true); for(var _e0 in _json0) {Decorator _v0; _v0 = Decorator.deserialize(_e0); decorators.add(_v0); } };
        final services;
        {var _json0 = _buf['services'] as List<dynamic>; services = List<Service>.empty(growable: true); for(var _e0 in _json0) {Service _v0; _v0 = Service.deserialize(_e0); services.add(_v0); } };
        final finish_mode;
        finish_mode = EFinishMode.fromValue(_buf['finish_mode']);
        final main_task;
        main_task = Task.deserialize(_buf['main_task']);
        final background_node;
        background_node = FlowNode.deserialize(_buf['background_node']);
        return SimpleParallel(
            id:id,
            node_name:node_name,
            decorators:decorators,
            services:services,
            finish_mode:finish_mode,
            main_task:main_task,
            background_node:background_node,
       );
    }

    final EFinishMode finish_mode;
    final Task main_task;
    final FlowNode background_node;
    static final int __ID__ = -1952582529;
     @override
    void resolveRef(Tables tables)
    {
        super.resolveRef(tables);

        main_task?.resolveRef(tables);
        background_node?.resolveRef(tables);
    }

    @override
    String toString() {
        return 'SimpleParallel(id:$id, node_name:$node_name, decorators:$decorators, services:$services, finish_mode:$finish_mode, main_task:$main_task, background_node:$background_node, )';
    }
}

