
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import 'dart:ffi';
import 'dart:collection';
import '/gen/Tables.dart';

import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/tag/TestTag.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/TestBeRef.dart';
import '/gen/test/RefDynamicBase.dart';


 class TestRef 
{
    TestRef(
    {
    required this.id,
    required this.x1,
    required this.x1_2,
    required this.x2,
    required this.x3,
    required this.x4,
    required this.a1,
    required this.a2,
    required this.b1,
    required this.b2,
    required this.c1,
    required this.c2,
    required this.d1,
    required this.d2,
    required this.e1,
    required this.e2,
    required this.e3,
    required this.f1,
    required this.f2,
    required this.f3,
    required this.s1,
    }
    );

    factory TestRef.deserialize(dynamic _buf){
        final id;
        id = _buf['id'] as int;
        final x1;
        x1 = _buf['x1'] as int;
        final x1_2;
        x1_2 = _buf['x1_2'] as int;
        final x2;
        x2 = _buf['x2'] as int;
        final x3;
        x3 = _buf['x3'] as int;
        final x4;
        x4 = _buf['x4'] as int;
        final a1;
        {var _json0 = _buf['a1'] as List<dynamic>; a1 = List<int>.empty(growable: true); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int; a1.add(_v0); } };
        final a2;
        {var _json0 = _buf['a2'] as List<dynamic>; a2 = List<int>.empty(growable: true); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int; a2.add(_v0); } };
        final b1;
        {var _json0 = _buf['b1'] as List<dynamic>; b1 = List<int>.empty(growable: true); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int; b1.add(_v0); } };
        final b2;
        {var _json0 = _buf['b2'] as List<dynamic>; b2 = List<int>.empty(growable: true); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int; b2.add(_v0); } };
        final c1;
        {var _json0 = _buf['c1'] as List<dynamic>; c1 = HashSet<int>(); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int;  c1.add(_v0); } };
        final c2;
        {var _json0 = _buf['c2'] as List<dynamic>; c2 = HashSet<int>(); for(var _e0 in _json0) {int _v0; _v0 = _e0 as int;  c2.add(_v0); } };
        final d1;
        { var __json0 = _buf['d1']; d1 = Map<int, int>(); for(var __e0 in __json0) { var _k0 = __e0[0] as int; int _v0;  _v0 = __e0[1] as int;  d1[_k0]= _v0; }   };
        final d2;
        { var __json0 = _buf['d2']; d2 = Map<int, int>(); for(var __e0 in __json0) { var _k0 = __e0[0] as int; int _v0;  _v0 = __e0[1] as int;  d2[_k0]= _v0; }   };
        final e1;
        e1 = _buf['e1'] as int;
        final e2;
        e2 = _buf['e2'] as int;
        final e3;
        e3 = _buf['e3'] as String;
        final f1;
        f1 = _buf['f1'] as int;
        final f2;
        f2 = _buf['f2'] as int;
        final f3;
        f3 = _buf['f3'] as String;
        final s1;
        s1 = RefDynamicBase.deserialize(_buf['s1']);
        return TestRef(
            id:id,
            x1:x1,
            x1_2:x1_2,
            x2:x2,
            x3:x3,
            x4:x4,
            a1:a1,
            a2:a2,
            b1:b1,
            b2:b2,
            c1:c1,
            c2:c2,
            d1:d1,
            d2:d2,
            e1:e1,
            e2:e2,
            e3:e3,
            f1:f1,
            f2:f2,
            f3:f3,
            s1:s1,
       );
    }

    final int id;
    final int x1;
    TestBeRef? x1_Ref;
    final int x1_2;
    TestBeRef? x12_Ref;
    final int x2;
    final int x3;
    final int x4;
    TestTag? x4_Ref;
    final List<int> a1;
    List<TestBeRef>? a1_Ref;
    final List<int> a2;
    List<TestBeRef>? a2_Ref;
    final List<int> b1;
    List<TestBeRef>? b1_Ref;
    final List<int> b2;
    List<TestBeRef>? b2_Ref;
    final HashSet<int> c1;
    HashSet<TestBeRef>? c1_Ref;
    final HashSet<int> c2;
    HashSet<TestBeRef>? c2_Ref;
    final Map<int, int> d1;
    Map<int, TestBeRef>? d1_Ref;
    final Map<int, int> d2;
    Map<int, TestBeRef>? d2_Ref;
    final int e1;
    final int e2;
    final String e3;
    final int f1;
    final int f2;
    final String f3;
    final RefDynamicBase s1;
    static final int __ID__ = -543222491;
     
    void resolveRef(Tables tables)
    {

        x1_Ref = tables.tbTestBeRef?.getOrDefault(x1);
        x12_Ref = tables.tbTestBeRef?.getOrDefault(x1_2);
        x4_Ref = tables.tbTestTag?.getOrDefault(x4);
        a1_Ref = List<TestBeRef>.empty(growable: true);
        for (var _v in a1) { var ref=(tables.tbTestBeRef?.getOrDefault(_v))!;a1_Ref?.add(ref); }

        a2_Ref = List<TestBeRef>.empty(growable: true);
        for (var _v in a2) { var ref=(tables.tbTestBeRef?.getOrDefault(_v))!;a2_Ref?.add(ref); }

        b1_Ref = List<TestBeRef>.empty(growable: true);
        for (var _v in b1) { var ref=(tables.tbTestBeRef?.getOrDefault(_v))!;b1_Ref?.add(ref); }

        b2_Ref = List<TestBeRef>.empty(growable: true);
        for (var _v in b2) { var ref=(tables.tbTestBeRef?.getOrDefault(_v))!;b2_Ref?.add(ref); }

        c1_Ref = HashSet<TestBeRef>();
        for (var _v in c1) { var ref= (tables.tbTestBeRef?.getOrDefault(_v))!;c1_Ref?.add(ref); }

        c2_Ref = HashSet<TestBeRef>();
        for (var _v in c2) { var ref= (tables.tbTestBeRef?.getOrDefault(_v))!;c2_Ref?.add(ref); }

        d1_Ref = Map<int, TestBeRef>();
        for (var kvp in d1.entries) { var ref= (tables.tbTestBeRef?.getOrDefault(kvp.value))!;d1_Ref?[kvp.key]= ref; }

        d2_Ref = Map<int, TestBeRef>();
        for (var kvp in d2.entries) { var ref= (tables.tbTestBeRef?.getOrDefault(kvp.value))!;d2_Ref?[kvp.key]= ref; }

        s1?.resolveRef(tables);
    }

    @override
    String toString() {
        return 'TestRef(id:$id, x1:$x1, x1_2:$x1_2, x2:$x2, x3:$x3, x4:$x4, a1:$a1, a2:$a2, b1:$b1, b2:$b2, c1:$c1, c2:$c2, d1:$d1, d2:$d2, e1:$e1, e2:$e2, e3:$e3, f1:$f1, f2:$f2, f3:$f3, s1:$s1, )';
    }
}

