
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type CfgBaseStats struct {
    MaxLevel int32
    Attack *CfgValueRange
    AttackSpeed int32
    AttackRange int32
    Mp int32
    MpCost int32
    MpRegen int32
    Defense *CfgValueRange
    Hp int32
    HpRegen int32
    MoveSpeed int32
    SpellClass int32
}

const TypeId_CfgBaseStats = 623783716

func (*CfgBaseStats) GetTypeId() int32 {
    return 623783716
}

func NewCfgBaseStats(_buf map[string]interface{}) (_v *CfgBaseStats, err error) {
    _v = &CfgBaseStats{}
    { var _ok_ bool; var __json_max_level__ interface{}; if __json_max_level__, _ok_ = _buf["max_level"]; !_ok_ || __json_max_level__ == nil { err = errors.New("max_level error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_max_level__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MaxLevel = __x__ }}
    { var _ok_ bool; var __json_attack__ interface{}; if __json_attack__, _ok_ = _buf["attack"]; !_ok_ || __json_attack__ == nil { err = errors.New("attack error"); return } else { var __x__ *CfgValueRange;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_attack__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewCfgValueRange(_x_); err != nil { return } }; _v.Attack = __x__ }}
    { var _ok_ bool; var __json_attack_speed__ interface{}; if __json_attack_speed__, _ok_ = _buf["attack_speed"]; !_ok_ || __json_attack_speed__ == nil { err = errors.New("attack_speed error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_attack_speed__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.AttackSpeed = __x__ }}
    { var _ok_ bool; var __json_attack_range__ interface{}; if __json_attack_range__, _ok_ = _buf["attack_range"]; !_ok_ || __json_attack_range__ == nil { err = errors.New("attack_range error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_attack_range__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.AttackRange = __x__ }}
    { var _ok_ bool; var __json_mp__ interface{}; if __json_mp__, _ok_ = _buf["mp"]; !_ok_ || __json_mp__ == nil { err = errors.New("mp error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_mp__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Mp = __x__ }}
    { var _ok_ bool; var __json_mp_cost__ interface{}; if __json_mp_cost__, _ok_ = _buf["mp_cost"]; !_ok_ || __json_mp_cost__ == nil { err = errors.New("mp_cost error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_mp_cost__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MpCost = __x__ }}
    { var _ok_ bool; var __json_mp_regen__ interface{}; if __json_mp_regen__, _ok_ = _buf["mp_regen"]; !_ok_ || __json_mp_regen__ == nil { err = errors.New("mp_regen error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_mp_regen__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MpRegen = __x__ }}
    { var _ok_ bool; var __json_defense__ interface{}; if __json_defense__, _ok_ = _buf["defense"]; !_ok_ || __json_defense__ == nil { err = errors.New("defense error"); return } else { var __x__ *CfgValueRange;  { var _ok_ bool; var _x_ map[string]interface{}; if _x_, _ok_ = __json_defense__.(map[string]interface{}); !_ok_ { err = errors.New("__x__ error"); return }; if __x__, err = NewCfgValueRange(_x_); err != nil { return } }; _v.Defense = __x__ }}
    { var _ok_ bool; var __json_hp__ interface{}; if __json_hp__, _ok_ = _buf["hp"]; !_ok_ || __json_hp__ == nil { err = errors.New("hp error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hp__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Hp = __x__ }}
    { var _ok_ bool; var __json_hp_regen__ interface{}; if __json_hp_regen__, _ok_ = _buf["hp_regen"]; !_ok_ || __json_hp_regen__ == nil { err = errors.New("hp_regen error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hp_regen__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HpRegen = __x__ }}
    { var _ok_ bool; var __json_move_speed__ interface{}; if __json_move_speed__, _ok_ = _buf["move_speed"]; !_ok_ || __json_move_speed__ == nil { err = errors.New("move_speed error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_move_speed__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MoveSpeed = __x__ }}
    { var _ok_ bool; var __json_spell_class__ interface{}; if __json_spell_class__, _ok_ = _buf["spell_class"]; !_ok_ || __json_spell_class__ == nil { err = errors.New("spell_class error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_spell_class__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SpellClass = __x__ }}
    return
}

