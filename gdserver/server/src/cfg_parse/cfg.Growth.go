
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type CfgGrowth struct {
    AttackPerLevel int32
    HpPerLevel int32
    DefensePerLevel int32
    MpPerLevel int32
    Coefficient int32
}

const TypeId_CfgGrowth = 1480948401

func (*CfgGrowth) GetTypeId() int32 {
    return 1480948401
}

func NewCfgGrowth(_buf map[string]interface{}) (_v *CfgGrowth, err error) {
    _v = &CfgGrowth{}
    { var _ok_ bool; var __json_attack_per_level__ interface{}; if __json_attack_per_level__, _ok_ = _buf["attack_per_level"]; !_ok_ || __json_attack_per_level__ == nil { err = errors.New("attack_per_level error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_attack_per_level__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.AttackPerLevel = __x__ }}
    { var _ok_ bool; var __json_hp_per_level__ interface{}; if __json_hp_per_level__, _ok_ = _buf["hp_per_level"]; !_ok_ || __json_hp_per_level__ == nil { err = errors.New("hp_per_level error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hp_per_level__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HpPerLevel = __x__ }}
    { var _ok_ bool; var __json_defense_per_level__ interface{}; if __json_defense_per_level__, _ok_ = _buf["defense_per_level"]; !_ok_ || __json_defense_per_level__ == nil { err = errors.New("defense_per_level error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_defense_per_level__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.DefensePerLevel = __x__ }}
    { var _ok_ bool; var __json_mp_per_level__ interface{}; if __json_mp_per_level__, _ok_ = _buf["mp_per_level"]; !_ok_ || __json_mp_per_level__ == nil { err = errors.New("mp_per_level error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_mp_per_level__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MpPerLevel = __x__ }}
    { var _ok_ bool; var __json_coefficient__ interface{}; if __json_coefficient__, _ok_ = _buf["coefficient"]; !_ok_ || __json_coefficient__ == nil { err = errors.New("coefficient error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_coefficient__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Coefficient = __x__ }}
    return
}

