
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type CfgRarity struct {
    Prefix string
    Weight int32
    MinNumber int32
    MaxNumber int32
}

const TypeId_CfgRarity = 1780245141

func (*CfgRarity) GetTypeId() int32 {
    return 1780245141
}

func NewCfgRarity(_buf map[string]interface{}) (_v *CfgRarity, err error) {
    _v = &CfgRarity{}
    { var _ok_ bool; var __json_prefix__ interface{}; if __json_prefix__, _ok_ = _buf["prefix"]; !_ok_ || __json_prefix__ == nil { err = errors.New("prefix error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_prefix__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.Prefix = __x__ }}
    { var _ok_ bool; var __json_weight__ interface{}; if __json_weight__, _ok_ = _buf["weight"]; !_ok_ || __json_weight__ == nil { err = errors.New("weight error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_weight__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Weight = __x__ }}
    { var _ok_ bool; var __json_min_number__ interface{}; if __json_min_number__, _ok_ = _buf["min_number"]; !_ok_ || __json_min_number__ == nil { err = errors.New("min_number error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_min_number__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MinNumber = __x__ }}
    { var _ok_ bool; var __json_max_number__ interface{}; if __json_max_number__, _ok_ = _buf["max_number"]; !_ok_ || __json_max_number__ == nil { err = errors.New("max_number error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_max_number__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MaxNumber = __x__ }}
    return
}

