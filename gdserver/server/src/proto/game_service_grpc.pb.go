// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: game_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameRpcService_RoomStatusNotifyRpc_FullMethodName   = "/game_service.GameRpcService/RoomStatusNotifyRpc"
	GameRpcService_GameStateNotifyRpc_FullMethodName    = "/game_service.GameRpcService/GameStateNotifyRpc"
	GameRpcService_PlayerActionNotifyRpc_FullMethodName = "/game_service.GameRpcService/PlayerActionNotifyRpc"
	GameRpcService_GameStartNotifyRpc_FullMethodName    = "/game_service.GameRpcService/GameStartNotifyRpc"
	GameRpcService_GameEndNotifyRpc_FullMethodName      = "/game_service.GameRpcService/GameEndNotifyRpc"
)

// GameRpcServiceClient is the client API for GameRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameRpcServiceClient interface {
	RoomStatusNotifyRpc(ctx context.Context, in *RoomDetailNotify, opts ...grpc.CallOption) (*NotifyResponse, error)
	GameStateNotifyRpc(ctx context.Context, in *GameStateNotify, opts ...grpc.CallOption) (*NotifyResponse, error)
	PlayerActionNotifyRpc(ctx context.Context, in *PlayerActionNotify, opts ...grpc.CallOption) (*NotifyResponse, error)
	GameStartNotifyRpc(ctx context.Context, in *GameStartNotify, opts ...grpc.CallOption) (*NotifyResponse, error)
	GameEndNotifyRpc(ctx context.Context, in *GameEndNotify, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type gameRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameRpcServiceClient(cc grpc.ClientConnInterface) GameRpcServiceClient {
	return &gameRpcServiceClient{cc}
}

func (c *gameRpcServiceClient) RoomStatusNotifyRpc(ctx context.Context, in *RoomDetailNotify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, GameRpcService_RoomStatusNotifyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRpcServiceClient) GameStateNotifyRpc(ctx context.Context, in *GameStateNotify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, GameRpcService_GameStateNotifyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRpcServiceClient) PlayerActionNotifyRpc(ctx context.Context, in *PlayerActionNotify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, GameRpcService_PlayerActionNotifyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRpcServiceClient) GameStartNotifyRpc(ctx context.Context, in *GameStartNotify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, GameRpcService_GameStartNotifyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRpcServiceClient) GameEndNotifyRpc(ctx context.Context, in *GameEndNotify, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, GameRpcService_GameEndNotifyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRpcServiceServer is the server API for GameRpcService service.
// All implementations must embed UnimplementedGameRpcServiceServer
// for forward compatibility.
type GameRpcServiceServer interface {
	RoomStatusNotifyRpc(context.Context, *RoomDetailNotify) (*NotifyResponse, error)
	GameStateNotifyRpc(context.Context, *GameStateNotify) (*NotifyResponse, error)
	PlayerActionNotifyRpc(context.Context, *PlayerActionNotify) (*NotifyResponse, error)
	GameStartNotifyRpc(context.Context, *GameStartNotify) (*NotifyResponse, error)
	GameEndNotifyRpc(context.Context, *GameEndNotify) (*NotifyResponse, error)
	mustEmbedUnimplementedGameRpcServiceServer()
}

// UnimplementedGameRpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameRpcServiceServer struct{}

func (UnimplementedGameRpcServiceServer) RoomStatusNotifyRpc(context.Context, *RoomDetailNotify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomStatusNotifyRpc not implemented")
}
func (UnimplementedGameRpcServiceServer) GameStateNotifyRpc(context.Context, *GameStateNotify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameStateNotifyRpc not implemented")
}
func (UnimplementedGameRpcServiceServer) PlayerActionNotifyRpc(context.Context, *PlayerActionNotify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerActionNotifyRpc not implemented")
}
func (UnimplementedGameRpcServiceServer) GameStartNotifyRpc(context.Context, *GameStartNotify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameStartNotifyRpc not implemented")
}
func (UnimplementedGameRpcServiceServer) GameEndNotifyRpc(context.Context, *GameEndNotify) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameEndNotifyRpc not implemented")
}
func (UnimplementedGameRpcServiceServer) mustEmbedUnimplementedGameRpcServiceServer() {}
func (UnimplementedGameRpcServiceServer) testEmbeddedByValue()                        {}

// UnsafeGameRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameRpcServiceServer will
// result in compilation errors.
type UnsafeGameRpcServiceServer interface {
	mustEmbedUnimplementedGameRpcServiceServer()
}

func RegisterGameRpcServiceServer(s grpc.ServiceRegistrar, srv GameRpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameRpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameRpcService_ServiceDesc, srv)
}

func _GameRpcService_RoomStatusNotifyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomDetailNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRpcServiceServer).RoomStatusNotifyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRpcService_RoomStatusNotifyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRpcServiceServer).RoomStatusNotifyRpc(ctx, req.(*RoomDetailNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRpcService_GameStateNotifyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStateNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRpcServiceServer).GameStateNotifyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRpcService_GameStateNotifyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRpcServiceServer).GameStateNotifyRpc(ctx, req.(*GameStateNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRpcService_PlayerActionNotifyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerActionNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRpcServiceServer).PlayerActionNotifyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRpcService_PlayerActionNotifyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRpcServiceServer).PlayerActionNotifyRpc(ctx, req.(*PlayerActionNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRpcService_GameStartNotifyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStartNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRpcServiceServer).GameStartNotifyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRpcService_GameStartNotifyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRpcServiceServer).GameStartNotifyRpc(ctx, req.(*GameStartNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRpcService_GameEndNotifyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameEndNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRpcServiceServer).GameEndNotifyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameRpcService_GameEndNotifyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRpcServiceServer).GameEndNotifyRpc(ctx, req.(*GameEndNotify))
	}
	return interceptor(ctx, in, info, handler)
}

// GameRpcService_ServiceDesc is the grpc.ServiceDesc for GameRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_service.GameRpcService",
	HandlerType: (*GameRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomStatusNotifyRpc",
			Handler:    _GameRpcService_RoomStatusNotifyRpc_Handler,
		},
		{
			MethodName: "GameStateNotifyRpc",
			Handler:    _GameRpcService_GameStateNotifyRpc_Handler,
		},
		{
			MethodName: "PlayerActionNotifyRpc",
			Handler:    _GameRpcService_PlayerActionNotifyRpc_Handler,
		},
		{
			MethodName: "GameStartNotifyRpc",
			Handler:    _GameRpcService_GameStartNotifyRpc_Handler,
		},
		{
			MethodName: "GameEndNotifyRpc",
			Handler:    _GameRpcService_GameEndNotifyRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_service.proto",
}
