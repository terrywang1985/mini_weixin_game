// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: room_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoomRpcService_CreateRoomRpc_FullMethodName   = "/room_service.RoomRpcService/CreateRoomRpc"
	RoomRpcService_JoinRoomRpc_FullMethodName     = "/room_service.RoomRpcService/JoinRoomRpc"
	RoomRpcService_LeaveRoomRpc_FullMethodName    = "/room_service.RoomRpcService/LeaveRoomRpc"
	RoomRpcService_GetReadyRpc_FullMethodName     = "/room_service.RoomRpcService/GetReadyRpc"
	RoomRpcService_StartGameRpc_FullMethodName    = "/room_service.RoomRpcService/StartGameRpc"
	RoomRpcService_GetRoomListRpc_FullMethodName  = "/room_service.RoomRpcService/GetRoomListRpc"
	RoomRpcService_PlayerActionRpc_FullMethodName = "/room_service.RoomRpcService/PlayerActionRpc"
)

// RoomRpcServiceClient is the client API for RoomRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomRpcServiceClient interface {
	CreateRoomRpc(ctx context.Context, in *CreateRoomRpcRequest, opts ...grpc.CallOption) (*CreateRoomRpcResponse, error)
	JoinRoomRpc(ctx context.Context, in *JoinRoomRpcRequest, opts ...grpc.CallOption) (*JoinRoomRpcResponse, error)
	LeaveRoomRpc(ctx context.Context, in *LeaveRoomRpcRequest, opts ...grpc.CallOption) (*LeaveRoomRpcResponse, error)
	GetReadyRpc(ctx context.Context, in *GetReadyRpcRequest, opts ...grpc.CallOption) (*GetReadyRpcResponse, error)
	StartGameRpc(ctx context.Context, in *StartGameRpcRequest, opts ...grpc.CallOption) (*StartGameRpcResponse, error)
	// 获取房间列表
	GetRoomListRpc(ctx context.Context, in *GetRoomListRpcRequest, opts ...grpc.CallOption) (*GetRoomListRpcResponse, error)
	// 使用流式 RPC 处理玩家操作
	// rpc PlayerActionRpc(stream PlayerActionRpcRequest) returns (stream PlayerActionRpcResponse);
	PlayerActionRpc(ctx context.Context, in *PlayerActionRpcRequest, opts ...grpc.CallOption) (*PlayerActionRpcResponse, error)
}

type roomRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomRpcServiceClient(cc grpc.ClientConnInterface) RoomRpcServiceClient {
	return &roomRpcServiceClient{cc}
}

func (c *roomRpcServiceClient) CreateRoomRpc(ctx context.Context, in *CreateRoomRpcRequest, opts ...grpc.CallOption) (*CreateRoomRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_CreateRoomRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) JoinRoomRpc(ctx context.Context, in *JoinRoomRpcRequest, opts ...grpc.CallOption) (*JoinRoomRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_JoinRoomRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) LeaveRoomRpc(ctx context.Context, in *LeaveRoomRpcRequest, opts ...grpc.CallOption) (*LeaveRoomRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveRoomRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_LeaveRoomRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) GetReadyRpc(ctx context.Context, in *GetReadyRpcRequest, opts ...grpc.CallOption) (*GetReadyRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadyRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_GetReadyRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) StartGameRpc(ctx context.Context, in *StartGameRpcRequest, opts ...grpc.CallOption) (*StartGameRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_StartGameRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) GetRoomListRpc(ctx context.Context, in *GetRoomListRpcRequest, opts ...grpc.CallOption) (*GetRoomListRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomListRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_GetRoomListRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcServiceClient) PlayerActionRpc(ctx context.Context, in *PlayerActionRpcRequest, opts ...grpc.CallOption) (*PlayerActionRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerActionRpcResponse)
	err := c.cc.Invoke(ctx, RoomRpcService_PlayerActionRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomRpcServiceServer is the server API for RoomRpcService service.
// All implementations must embed UnimplementedRoomRpcServiceServer
// for forward compatibility.
type RoomRpcServiceServer interface {
	CreateRoomRpc(context.Context, *CreateRoomRpcRequest) (*CreateRoomRpcResponse, error)
	JoinRoomRpc(context.Context, *JoinRoomRpcRequest) (*JoinRoomRpcResponse, error)
	LeaveRoomRpc(context.Context, *LeaveRoomRpcRequest) (*LeaveRoomRpcResponse, error)
	GetReadyRpc(context.Context, *GetReadyRpcRequest) (*GetReadyRpcResponse, error)
	StartGameRpc(context.Context, *StartGameRpcRequest) (*StartGameRpcResponse, error)
	// 获取房间列表
	GetRoomListRpc(context.Context, *GetRoomListRpcRequest) (*GetRoomListRpcResponse, error)
	// 使用流式 RPC 处理玩家操作
	// rpc PlayerActionRpc(stream PlayerActionRpcRequest) returns (stream PlayerActionRpcResponse);
	PlayerActionRpc(context.Context, *PlayerActionRpcRequest) (*PlayerActionRpcResponse, error)
	mustEmbedUnimplementedRoomRpcServiceServer()
}

// UnimplementedRoomRpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomRpcServiceServer struct{}

func (UnimplementedRoomRpcServiceServer) CreateRoomRpc(context.Context, *CreateRoomRpcRequest) (*CreateRoomRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) JoinRoomRpc(context.Context, *JoinRoomRpcRequest) (*JoinRoomRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoomRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) LeaveRoomRpc(context.Context, *LeaveRoomRpcRequest) (*LeaveRoomRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoomRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) GetReadyRpc(context.Context, *GetReadyRpcRequest) (*GetReadyRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadyRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) StartGameRpc(context.Context, *StartGameRpcRequest) (*StartGameRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGameRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) GetRoomListRpc(context.Context, *GetRoomListRpcRequest) (*GetRoomListRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomListRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) PlayerActionRpc(context.Context, *PlayerActionRpcRequest) (*PlayerActionRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerActionRpc not implemented")
}
func (UnimplementedRoomRpcServiceServer) mustEmbedUnimplementedRoomRpcServiceServer() {}
func (UnimplementedRoomRpcServiceServer) testEmbeddedByValue()                        {}

// UnsafeRoomRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomRpcServiceServer will
// result in compilation errors.
type UnsafeRoomRpcServiceServer interface {
	mustEmbedUnimplementedRoomRpcServiceServer()
}

func RegisterRoomRpcServiceServer(s grpc.ServiceRegistrar, srv RoomRpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoomRpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoomRpcService_ServiceDesc, srv)
}

func _RoomRpcService_CreateRoomRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).CreateRoomRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_CreateRoomRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).CreateRoomRpc(ctx, req.(*CreateRoomRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_JoinRoomRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).JoinRoomRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_JoinRoomRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).JoinRoomRpc(ctx, req.(*JoinRoomRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_LeaveRoomRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).LeaveRoomRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_LeaveRoomRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).LeaveRoomRpc(ctx, req.(*LeaveRoomRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_GetReadyRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadyRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).GetReadyRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_GetReadyRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).GetReadyRpc(ctx, req.(*GetReadyRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_StartGameRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).StartGameRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_StartGameRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).StartGameRpc(ctx, req.(*StartGameRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_GetRoomListRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomListRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).GetRoomListRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_GetRoomListRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).GetRoomListRpc(ctx, req.(*GetRoomListRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpcService_PlayerActionRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerActionRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServiceServer).PlayerActionRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoomRpcService_PlayerActionRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServiceServer).PlayerActionRpc(ctx, req.(*PlayerActionRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomRpcService_ServiceDesc is the grpc.ServiceDesc for RoomRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room_service.RoomRpcService",
	HandlerType: (*RoomRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoomRpc",
			Handler:    _RoomRpcService_CreateRoomRpc_Handler,
		},
		{
			MethodName: "JoinRoomRpc",
			Handler:    _RoomRpcService_JoinRoomRpc_Handler,
		},
		{
			MethodName: "LeaveRoomRpc",
			Handler:    _RoomRpcService_LeaveRoomRpc_Handler,
		},
		{
			MethodName: "GetReadyRpc",
			Handler:    _RoomRpcService_GetReadyRpc_Handler,
		},
		{
			MethodName: "StartGameRpc",
			Handler:    _RoomRpcService_StartGameRpc_Handler,
		},
		{
			MethodName: "GetRoomListRpc",
			Handler:    _RoomRpcService_GetRoomListRpc_Handler,
		},
		{
			MethodName: "PlayerActionRpc",
			Handler:    _RoomRpcService_PlayerActionRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room_service.proto",
}
