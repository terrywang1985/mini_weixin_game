// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: match_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchRpcService_StartMatchRpc_FullMethodName  = "/match.MatchRpcService/StartMatchRpc"
	MatchRpcService_CancelMatchRpc_FullMethodName = "/match.MatchRpcService/CancelMatchRpc"
)

// MatchRpcServiceClient is the client API for MatchRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 匹配服务
type MatchRpcServiceClient interface {
	StartMatchRpc(ctx context.Context, in *MatchRpcRequest, opts ...grpc.CallOption) (*MatchRpcResponse, error)
	CancelMatchRpc(ctx context.Context, in *CancelMatchRpcRequest, opts ...grpc.CallOption) (*MatchRpcResponse, error)
}

type matchRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchRpcServiceClient(cc grpc.ClientConnInterface) MatchRpcServiceClient {
	return &matchRpcServiceClient{cc}
}

func (c *matchRpcServiceClient) StartMatchRpc(ctx context.Context, in *MatchRpcRequest, opts ...grpc.CallOption) (*MatchRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchRpcResponse)
	err := c.cc.Invoke(ctx, MatchRpcService_StartMatchRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcServiceClient) CancelMatchRpc(ctx context.Context, in *CancelMatchRpcRequest, opts ...grpc.CallOption) (*MatchRpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchRpcResponse)
	err := c.cc.Invoke(ctx, MatchRpcService_CancelMatchRpc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchRpcServiceServer is the server API for MatchRpcService service.
// All implementations must embed UnimplementedMatchRpcServiceServer
// for forward compatibility.
//
// 匹配服务
type MatchRpcServiceServer interface {
	StartMatchRpc(context.Context, *MatchRpcRequest) (*MatchRpcResponse, error)
	CancelMatchRpc(context.Context, *CancelMatchRpcRequest) (*MatchRpcResponse, error)
	mustEmbedUnimplementedMatchRpcServiceServer()
}

// UnimplementedMatchRpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchRpcServiceServer struct{}

func (UnimplementedMatchRpcServiceServer) StartMatchRpc(context.Context, *MatchRpcRequest) (*MatchRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatchRpc not implemented")
}
func (UnimplementedMatchRpcServiceServer) CancelMatchRpc(context.Context, *CancelMatchRpcRequest) (*MatchRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMatchRpc not implemented")
}
func (UnimplementedMatchRpcServiceServer) mustEmbedUnimplementedMatchRpcServiceServer() {}
func (UnimplementedMatchRpcServiceServer) testEmbeddedByValue()                         {}

// UnsafeMatchRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchRpcServiceServer will
// result in compilation errors.
type UnsafeMatchRpcServiceServer interface {
	mustEmbedUnimplementedMatchRpcServiceServer()
}

func RegisterMatchRpcServiceServer(s grpc.ServiceRegistrar, srv MatchRpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchRpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchRpcService_ServiceDesc, srv)
}

func _MatchRpcService_StartMatchRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchRpcServiceServer).StartMatchRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchRpcService_StartMatchRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchRpcServiceServer).StartMatchRpc(ctx, req.(*MatchRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchRpcService_CancelMatchRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelMatchRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchRpcServiceServer).CancelMatchRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchRpcService_CancelMatchRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchRpcServiceServer).CancelMatchRpc(ctx, req.(*CancelMatchRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchRpcService_ServiceDesc is the grpc.ServiceDesc for MatchRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "match.MatchRpcService",
	HandlerType: (*MatchRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMatchRpc",
			Handler:    _MatchRpcService_StartMatchRpc_Handler,
		},
		{
			MethodName: "CancelMatchRpc",
			Handler:    _MatchRpcService_CancelMatchRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_service.proto",
}
